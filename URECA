# URECA
# 6 October 2024

using Random
# Fix the random seed to 5
Random.seed!(5) 

# Nodes in the frictional domain of each fault
N = 1400

# Plots results, otherwise put to 0
plotflag = 0

# Save data for the plotting figures
saveflag = 1

# Shear modulus
mu = 32.04e9

# Poisson ration, which could be interpreted as undrained poisson's ration
nu = 0.35

# Skempton's coeffictient which scales the undrained pore pressure response 
B = 0.8

# Fault half-length
LF = 24 / 2

# If 1, uses aging law, if other numbers, use slip law
AL = 1

# linspace function in Matlab creates a vector of spaced elements. In Julia, we can use 
# range or LinRange
# vcat = concatenates vectors vertically
# range() creates vector of N-2 interval between -LF and LF
# -20.-LF and LF + 20 as 1st and last elements of the vector
# .- to substract a scalar to the entire vector
yf = vcat(-20 .- LF, range(-LF, stop=LF, length=N-2), LF + 20)
yf .-= yf[1]

# Boundary Element Method simulation to model fault mechanics 
# .* = element-wise multiplication, creating array of xf zeros with same size as yf
xf = 0.0 .* yf

# plot(xf, yf)
# return

# call function crack_bem_pert_H
# G = shear stress
# GN = normal stress interactions
# PU = pore pressure interactions on the fault
# mfault = fault-specific matrix for boundary condition
# vn, vs, vd = normal, shear, and displacement components at fault Nodes
# xloc = location of fault Nodes
#G, GN, PU, mfault, vn, vs, vd, xloc = crack_bem_pert_H(L, mu, nu, x, y)

x = [0.0, 1.0, 2.0, 3.0]
y = [0.0, 0.0, 0.0, 0.0]
L = 1.0
mu = 30e9
nu = 0.25
crack_bem_pert_H(L, mu, nu, x, y)
@show xc 







